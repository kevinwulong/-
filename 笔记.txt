


1\ cookie

优点：极高的扩展性和可用性

1）数据的持久性
2）不需要任何服务器的资源
3）可配置到期规则 
4）简单性 基于文本的轻量结构

缺点：
1）数量和长度的限制
firefox最多50个 谷歌和sagari没有限制
长度：不能超过4KB，否则会被截掉
2）潜在的安全风险 会被拦截篡改
3）用户配置为禁用
4）有些状态不能保存在客户端


2\ 浏览器本地存储 Web Storage

js提供了 sessionStorage 和 localStorage（html5之前是用globalStorage）
sessionStorage  本地存储一个session中的数据 不是持久化的，是会话级别的存储
localStorange 除非主动删除数据，否则数据永远不过期


Web Storange和Cookie
1）存储空间不同，前者能提供5mb存储空间 后者就4kb
2） 前者数据仅在本地，不会和服务器发生任何交互
       后者的内容会随着请求一起发送到服务器
3） 前者接口多，后者要自己封装轮子
4） 跨域问题，cookie需要指定作用域，不可以跨域调用


3） 
display:none ： 隐藏对应元素，文档布局里没有它的空间，旁边的元素会合拢。
visibility:hidden ：隐藏对应元素，会保留它的空间。


3\   link @import
link: HTML标签 页面加载时同时加载  是标签无兼容问题 权重高
@import： css提供 页面加载完再加载 IE5以上兼容


4\  position absolute fixed
共同点：
1 display被设置为block
2 让元素脱离普通流，不占据空间了
3 默认会覆盖到没定位的元素上

不同点：
1 absolute的根元素是可以设置的
fixed的根元素固定为浏览器窗口
滚动网页的时候fixed和浏览器窗口之间的距离是不变的
 

5\ CSS盒子
盒模型： content，padding，margin，border
IE盒子和 标准W3C盒子
IE盒子的content包括了paading和border


CSS：
可继承的样式：
font-size font-family color text-indent
不可继承的样式：
border padding margin width height


6\  display
inline: 像行内元素类型一样显示
position
absolute: 绝对定位的元素 第一个祖先元素进行定位
static：默认值
inherit：继承父元素的属性值


7\ Doctype
<!DOCTYPE> 写在<html>前面 告知浏览器用什么模式来渲染文档。
混杂模式：不声明就会出现 以宽松的向后兼容的方式显示

8\ 兼容问题
Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示
解决方法：可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决

9 \ 浮动
脱离文档流，不占据空间。
清除浮动流 给包含浮动元素的父标签添加css属性 overflow:auto; 
	      设置 overflow 为 hidden 或者 auto

10\ 
null是一个表示"无"的对象，转为数值时为0
undefined是一个表示"无"的原始值，转为数值时为NaN

当声明的变量还未被初始化时，变量的默认值为undefined
null用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象

undefined表示 “缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：
1. 变量被声明了，但没有赋值时，就等于 undefined
2. 调用函数时，应该提供的参数没有提供，该参数等于 undefined
3. 对象没有赋值的属性，该属性的值为 undefined
4. 函数没有返回值时，默认返回 undefined

null表示“没有对象”，即该处不应该有值。典型用法是：
1. 作为函数的参数，表示该函数的参数不是对象
2. 作为对象原型链的终点


11\ 
document.write 只能重绘整个页面

innerHTML 可以重绘页面的一部分

12\  .call() 和 .apply() 的作用？
动态改变某个类的某个方法的运行环境

13\ Node
优点：
1. 因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。
2. 与Node代理服务器交互的客户端代码是由javascript语言编写的，因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。

缺点：
1. Node是一个相对新的开源项目，所以不太稳定，它总是一直在变。
2. 缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子（第三方库现在已经很丰富了，所以这个缺点可以说不存在了）。

14\http 状态码
1. 100-199 用于指定客户端应相应的某些动作
2. 200-299 用于表示请求成功
3. 300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息
4. 400-499 用于指出客户端的错误
    400：语义有误，当前请求无法被服务器理解
    401：当前请求需要用户验证
    403：服务器已经理解请求，但是拒绝执行它
5. 500-599 用于支持服务器错误
    503：服务不可用

15\ 对象
1. 工厂模式
2. 构造函数模式
3. 原型模式
4. 混合构造函数和原型模式
5. 动态原型模式
6. 寄生构造函数模式
7. 稳妥构造函数模式

16\  继承方法
1. 原型链继承
2. 借用构造函数继承
3. 组合继承(原型+借用构造)
4. 原型式继承
5. 寄生式继承
6. 寄生组合式继承

17\ ajax过程
1. 创建XMLHttpRequest对象,也就是创建一个异步调用对象
2. 创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息
3. 设置响应HTTP请求状态变化的函数
4. 发送HTTP请求
5. 获取异步调用返回的数据
6. 使用JavaScript和DOM实现局部刷新

18\ 
GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符
POST：一般用于修改服务器上的资源，对所发送的信息没有限制

GET方式需要使用 Request.QueryString 来取得变量的值
POST方式通过 Request.Form 来获取变量的值
也就是说 Get 是通过地址栏来传值，而 Post 是通过提交表单来传值。

在以下情况中，请使用 POST 请求：
1. 无法使用缓存文件（更新服务器上的文件或数据库）
2. 向服务器发送大量数据（POST 没有数据量限制）
3. 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠


19 通用的事件侦听器
// event(事件)工具集，来源：github.com/markyun

markyun.Event = {
    // 页面加载完成后
    readyEvent : function(fn) {
        if (fn==null) {
            fn=document;
        }
        var oldonload = window.onload;
        if (typeof window.onload != 'function') {
            window.onload = fn;
        } else {
            window.onload = function() {
                oldonload();
                fn();
            };
        }
    },
    // 视能力分别使用dom0||dom2||IE方式 来绑定事件
    // 参数： 操作的元素,事件名称 ,事件处理程序
    addEvent : function(element, type, handler) {
        if (element.addEventListener) {
            //事件类型、需要执行的函数、是否捕捉
            element.addEventListener(type, handler, false);
        } else if (element.attachEvent) {
            element.attachEvent('on' + type, function() {
                handler.call(element);
            });
        } else {
            element['on' + type] = handler;
        }
    },
    // 移除事件
    removeEvent : function(element, type, handler) {
        if (element.removeEnentListener) {
            element.removeEnentListener(type, handler, false);
        } else if (element.detachEvent) {
            element.detachEvent('on' + type, handler);
        } else {
            element['on' + type] = null;
        }
    }, 
    // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)
    stopPropagation : function(ev) {
        if (ev.stopPropagation) {
            ev.stopPropagation();
        } else {
            ev.cancelBubble = true;
        }
    },
    // 取消事件的默认行为
    preventDefault : function(event) {
        if (event.preventDefault) {
            event.preventDefault();
        } else {
            event.returnValue = false;
        }
    },
    // 获取事件目标
    getTarget : function(event) {
        return event.target || event.srcElement;
    },
    // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；
    getEvent : function(e) {
        var ev = e || window.event;
        if (!ev) {
            var c = this.getEvent.caller;
            while (c) {
                ev = c.arguments[0];
                if (ev && Event == ev.constructor) {
                    break;
                }
                c = c.caller;
            }
        }
        return ev;
    }
};

20、原型
1. 原型对象也是普通的对象，是对象一个自带隐式的 __proto__ 属性，原型也有可能有自己的原型
，如果一个原型对象的原型不为 null 的话，我们就称之为原型链
2. 原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链


21、 cookie

// 创建cookie
function setCookie(name, value, expires, path, domain, secure) {
    var cookieText = encodeURIComponent(name) + '=' + encodeURIComponent(value);
    if (expires instanceof Date) {
        cookieText += '; expires=' + expires;
    }
    if (path) {
        cookieText += '; expires=' + expires;
    }
    if (domain) {
        cookieText += '; domain=' + domain;
    }
    if (secure) {
        cookieText += '; secure';
    }
    document.cookie = cookieText;
}
// 获取cookie
function getCookie(name) {
    var cookieName = encodeURIComponent(name) + '=';
    var cookieStart = document.cookie.indexOf(cookieName);
    var cookieValue = null;
    if (cookieStart > -1) {
        var cookieEnd = document.cookie.indexOf(';', cookieStart);
        if (cookieEnd == -1) {
            cookieEnd = document.cookie.length;
        }
        cookieValue = decodeURIComponent(document.cookie.substring(cookieStart + cookieName.length, cookieEnd));
    }
    return cookieValue;
}
// 删除cookie
function unsetCookie(name) {
    document.cookie = name + "= ; expires=" + new Date(0);
}


22 \ 数组

栈方法
push()  推入一项 并返回推入后的数组长度。
pop()  移除最后一项 并返回移除的项。

队列方法
 
shift() 移除第一项 并返回移除的项，同时将数组长度-1。
unshift() 在数组前端推入任何个 项，并返回移除的项。


降序排序

function test( value1 , value2 ){
    return value2 - value1;
}

复制数组并接受新数组 返回数组
concat()

接受一或多个项来创建新的数组
splice()
删除：
    splice(0, 2) 删除从第一个项开始的前两项
插入：
    splice(2, 0 ,"red","yellow") 从第二个项的起始位置删除0个并插入后面的项
替换：
    splice(2, 1 ,"red","yellow") 从第二个项的起始位置删除1个并插入后面的项


23、 
引用类型和基本包装类型的主要区别在于生存期


24、 
字符方法

charAt() 接受一个字符位置并返回
trim() 删除字符串前面和后面的所有空格
toUpperCase()  大写
toLowerCase()  小写



25、
数字方法 

最大最小数
min()
max()

var arr = [1,2,3,4,5,6,7,8,9]
var max = Math.max.apply( Math, arr )

舍入
Math.ceil()     向上舍入
Math.floor()   向下舍入
Math.round() 标准四舍五入

随机
X = Math.floor(Math.random() * X的总数 + 第一个可能的值   )

最大值和最小值之间
function test( first , last ){
    var choices = last  -  first  +1 ;
    return Math.floor(Math.random() * choices + first);
}


26 函数 
定义函数的方式 
1 函数声明
function index( arg0 ,arg1 , arg2){

    xxxx
}

2 函数表达式
var index = function(arg0 ,arg1 , arg2){

}

27  闭包
有权访问另一个函数作用域中的变量与函数。


var name = "The Window";
var object = {
    name : "my object";
    getNameFunc : function(){
                return  function(){
                    return this.name;
                }
    }
}
alert(object.getNameFunc(){}) // "The window"

匿名函数里面this==window 

this对象是在运行时基于函数的执行环境绑定的， 
匿名函数的执行环境具有全局性， 
因此匿名函数的this指向window

28   BOM （browser object model 浏览器对象模型）              
29   DOM (docuemnt object model 文档对象模型)
    
      每个节点都有 childNodes 属性 其中保存了一个 NodeList 对象
                     都有 parentNode 指向父节点
      父节点的firstChild和lastChild 分别指向 第一个和最后一个节点
      hasChildNodes() 若有子节点就返回 true

      操作节点
     appendChild() 向childNodes列表末尾添加一个节点
     insertBefore( 要插入的节点  ,  作为参照的节点 ) 在参照的节点前面插入
     replaceChild( 要替换的节点  ,  作为参照的节点 ) 同上
     removeChild() 删除节点   

     查找元素 
     getElementById()
     getElementsByTagName()
     getElementsByName()
     getElementsByClassName()
     操作元素
     getAttribute()
     setAttribute()
     div.setAttribute("class" , "index");
     innerHtml()
     innerText()//删除元素的所有子节点，插入文本节点

     removeAttribute()
     创建元素
     document.createElement()

     var div = document.createElement("div");
     div.id="abc";
     div.className="box";
     document.body.appendChild(div)

     子节点
     var ul = document.getElementById("myul");
     var li = ul.getElementsByTagName('li')

     文本节点

     var textNode = document.createTextNode("<strong>Hello</strong> world!");
     var div = document.createElement("div");
     
     div.className="message";
     div.appendChild(textNode);
     document.body.appendChild(div)

     children属性

     var childCount = element.children.length;
     var firstChild  = element.children[0];

30 事件
    
    IE：　事件冒泡:最具体的元素接收 向上传播。
    netscape：事件捕获： 最具体的元素最后接收到事件，向下传播 

31 JSONP
    由回调函数和数据组成。
    xxxxxxx.net/json/?callback=handleResponse

    var script = document.createElement("script");
    script.src = "xxxxxxx.net/json/?callback=handleResponse"


引用相关题目
1、
var a = {n:1}; 
var b = a;  
a = {n:2}; 
a.x = a ;
console.log(a.x); // {n:2}
console.log(b.x); // undefined
//b指向的对象a已经重置了，所以当a设置x的时候和b无关。所以b.x = undefined

2、 

var a = {n:1}; 
var b = a;  
a.x = a = {n:2}; 
console.log(a.x);
console.log(b.x);
/* 
.运算符优先于=


1 a.x  变量a和b都有x 
2 a={ n:2 } 变量a重新指向到 { n: 2 }
3 a => {n: 2}
   b => {n: 1, x: {n: 2 } }   
*/


3、 
~操作符
var n1 = 10;
var n2 = ~10;
转换成二进制 取反数。
10转换成 
0000000000000000001010 =>1111111111111111110101 
n2 = -11;



12.30

浏览器兼容性问题

    css一直遇到的就这一个。
    1、 写出来的每个标签默认的padding和margin都不一样
     解决方法:
     *{
        padding:0;
        margin:0;
     }
    2、 水平居中
    FF: margin:0 auto;
    IE: 父级{ text-align:center; }

    js的话

    1、 
    event.x 和 event.y
    ie下 没有pageX和pageY属性
    firefox下 没有 event.x event.y 属性
    解决方法
    mX = event.x ? event.x : event.pageX;
    mX代替event.x

    2、 
    window.event无法再火狐上运行
    火狐的event只能在事件发生的现场使用

    解决办法
    function index(e){
        e = e || window.
    }



1.4
原型


_proto_     是对象的内置属性
    是js内部使用寻找原型链的属性
    var a = 1;
    console.log(a.__proto__);
    function fn() {
        this.name = 1;
    }
    console.log(fn.__proto__);
    var obj = {
        name : 1
    };
    console.log(obj.__proto__);
    //[Number:0]
    //[Function]
    //{}
    任何变量都有这个属性除了null。

prototype是函数的内置属性
    是一个指针，指向一个对象，显示修改对象的原型的属性。
    var a = 1;
    console.log(a.prototype);
    function fn() {
        this.name = 1;
    }
    console.log(fn.prototype);
    var obj = {
        name : 1
    };
    console.log(obj.prototype);
    //undefined
    //fn(){}
    //undefined
    只有函数有prototype

var kevin= new Man();
1 新建一个对象 kevin={}
2 Man.call(kevin , name , age);
3 kevin._proto_ = Man.prototype



（1）JavaScript的数据类型

基本数据类型：Number，String，Boolean，Undefined，Null

复杂数据类型：Object，Array，Function，RegExp，Date，Error

全局数据类型：Math